# https://www.natashatherobot.com/rails-test-omniauth-sessions-controller/
# spec_helper.rb
require 'rubygems'
require 'capybara/rspec' 
# This file is copied to spec/ when you run 'rails generate rspec:install'
  OmniAuth.config.test_mode = true
  omniauth_hash = { 'provider' => 'google_oauth2',
                    'uid' => '105362273761620533373',
                    'info' => {
                        'name' => 'Kulsoft',
                        'email' => 'kulsoft.net@gmail.com',
                        'nickname' => 'kulsoft'
                    },
                    'extra' => {'raw_info' =>
                                    { 'location' => 'San Francisco',
                                      'gravatar_id' => '123456789'
                                    }
                    }
  }
  OmniAuth.config.add_mock(:google_oauth2, omniauth_hash)

  omniauth_hash = { 'provider' => 'facebook',
                    'uid' => '105362273761620533373',
                    'info' => {
                      'name' => 'Peter Colling',
                      'email' => '1.0@kul.asia',
                      'nickname' => 'Peter C'
                      },
                    'extra' => {'raw_info' =>
                      {'location' => 'LA',
                      'gravatar_id' => '13'
                      }
                    } 
                  } 
  OmniAuth.config.add_mock(:facebook, omniauth_hash)
  

###########################################################################################
# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  # config.include SpecTestHelper, :type => :controller
  config.expect_with :rspec do |expectations|
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
    expectations.syntax = [:expect, :should]
  end
  config.mock_with :rspec do |mocks|
    mocks.verify_partial_doubles = true
  end
  config.shared_context_metadata_behavior = :apply_to_host_groups

# https://github.com/DatabaseCleaner/database_cleaner #

  config.use_transactional_fixtures = false

  config.before(:suite) do
    if config.use_transactional_fixtures?
      raise(<<-MSG)
        Delete line `config.use_transactional_fixtures = true` from rails_helper.rb
        (or set it to false) to prevent uncommitted transactions being used in
        JavaScript-dependent specs.

        During testing, the app-under-test that the browser driver connects to
        uses a different database connection to the database connection used by
        the spec. The app's database connection would not be able to access
        uncommitted transaction data setup over the spec's database connection.
      MSG
    end
    DatabaseCleaner.clean_with(:truncation)
  end

  config.before(:each, :js => true) do
    #DatabaseCleaner.strategy = :transaction
    DatabaseCleaner.strategy = :truncation
  end

  config.before(:each, type: :feature) do
    # :rack_test driver's Rack app under test shares database connection
    # with the specs, so continue to use transaction strategy for speed.
    driver_shares_db_connection_with_specs = Capybara.current_driver == :rack_test

    unless driver_shares_db_connection_with_specs
      # Driver is probably for an external browser with an app
      # under test that does *not* share a database connection with the
      # specs, so use truncation strategy.
      # DatabaseCleaner.strategy = :truncation
      DatabaseCleaner[:mongoid].strategy = :truncation

    end
  end

  config.before(:each) do
    DatabaseCleaner.start
  end

  config.append_after(:each) do
    DatabaseCleaner.clean
  end
#  https://github.com/DatabaseCleaner/database_cleaner #

end
